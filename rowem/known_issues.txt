Known isues or Limitations of rowem:
------------------------------------
- only 8kB EPROM size supported (some CCCs had a 16kB EPROM installed)
- LED display controllers (MM5450) not actually emulated.  rowem just pulls the data directly from RAM and interprets them as charaters (mostly digits) as they were originally defined.  Any changes to the character codes to change the way digits are displayed, of course, will not be properly emulated.
- the 6520 PIAs are not fully/properly emulated.  The factory CCC code sets the PIAs registers (selecting I/O direction by bit, etc.) at boot time, and does not ever change it.  Therefore, rowem is written more simply by assuming the factory I/O configuration is programmed.
- the record-handling mechanism (mech) simulation is approximate, at best.  While it seem to fool the code into believing the magazine as turning (opto cycling), and that the transfer succeeds (switches), the timing and other aspects are likely FAR from accurate.
- the "mirroring" of addresses due to incomplete address decoding is not emulated.  The as-written code appears very well-behaved, and does not seem to rely on any mirroring (all known read/writes are to the nominal locations).
- the speed/timing is currently very crude, and not automatic throttling is implemented.  A "sleep()" function slows operation can allow it to be made to run near-real speeds by iterative adjustment (and re-compilation).  An automatic-throttling system based on real time would be much better.
- the LED display controller PCB in the top of the jukebox has not been inspected, and no schematics have been found.  The functionalty emulated was developed from the assumed function and inspection of the code.
- the function of a bill-validator (e.g. pulsing the $1 line 5 times for a $5 bill) is not emulated.
- the program user interface input (key reading) and output (display) assumes a standard-sized CLI window, and is currently OS-dependant (Windows).
